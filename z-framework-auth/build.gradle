buildscript {
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'java-library'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'org.springframework.boot'
sourceCompatibility = 1.8

repositories {
	mavenCentral()
}

dependencyManagement {
	imports {
		mavenBom 'org.springframework.cloud:spring-cloud-dependencies:Greenwich.RELEASE'
	}
}

dependencies {
	compile 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
	compile("org.springframework.cloud:spring-cloud-starter-openfeign")
	compile 'org.springframework.boot:spring-boot-starter-web'
	compile 'org.springframework.boot:spring-boot-starter-undertow'
	compile 'org.springframework.boot:spring-boot-starter-jdbc'
	compile 'org.springframework.boot:spring-boot-starter-test'
	compile 'org.springframework.boot:spring-boot-configuration-processor'
	compile 'org.springframework.boot:spring-boot-starter-data-redis-reactive'
	compile 'com.google.code.gson:gson:2.8.5'
	compile("com.alibaba:fastjson:${fastjson}")
	compile 'mysql:mysql-connector-java:5.1.25'
	compile 'com.vdurmont:emoji-java:5.1.1'
	compile 'org.mybatis.spring.boot:mybatis-spring-boot-starter:1.3.2'
	compile 'com.github.whvcse:easy-captcha:1.6.2'
	compile ("org.projectlombok:lombok:${lombok}")
	annotationProcessor("org.projectlombok:lombok:${lombok}")

	compile project(':z-framework-encrypt-core')
	compile project(':z-framework-alarm-core')
	compile project(':z-framework-auth-core')
}

configurations {
	// 所有需要忽略的包定义在此
	//all*.exclude group: 'commons-httpclient'
	all*.exclude group: 'log4j'
	all*.exclude group: 'commons-logging'
	compile.exclude group:'org.springframework.boot',module:'spring-boot-starter-tomcat'
	//all*.exclude group: 'ch.qos.logback'
	//all*.exclude group: "slf4j*"
}

tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
}


gradle.taskGraph.whenReady {
	tasks.each { task ->
		if (task.name.contains("test")) {
			task.enabled = false
		}
	}
}

task clearLastBuild(type:Delete){
	FileTree tree = fileTree("build")
	println(tree)
	tree.visit{
		ele ->delete ele.file
	}
	tree = fileTree("out")
	println(tree)
	tree.visit{
		ele ->delete ele.file
	}
}

