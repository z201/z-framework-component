buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath "io.spring.gradle:dependency-management-plugin:${dependencymanagementplugin}"
    }
}
//
apply plugin: "io.spring.dependency-management"
apply plugin: 'java-library'
//apply plugin: 'eclipse'
//apply plugin: 'idea'
sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springclouddependencies}"
        mavenBom "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
    }
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'
    compile 'org.apache.commons:commons-exec:1.3'
    compile('com.google.code.gson:gson:2.8.5')
    compile("io.jsonwebtoken:jjwt:0.9.0")
    compileOnly 'org.springframework:spring-context'
    compile 'org.springframework.boot:spring-boot-starter-data-redis-reactive'
    compile ("org.projectlombok:lombok:${lombok}")
    annotationProcessor("org.projectlombok:lombok:${lombok}")
    compile project(':z-framework-core')
}


gradle.taskGraph.whenReady {
    tasks.each { task ->
        if (task.name.contains("test")) {
            task.enabled = false
        }
    }
}

task clearLastBuild(type: Delete) {
    FileTree tree = fileTree("build")
    println(tree)
    tree.visit {
        ele -> delete ele.file
    }
    tree = fileTree("out")
    println(tree)
    tree.visit{
        ele ->delete ele.file
    }
}

